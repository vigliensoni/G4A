#!/usr/bin/python

#
# aruspix_rec - recognition of music symbols in gamera
#               this file is part of the aruspix toolkit for gamera
#				uses arupsix files for input and output
#
# Authors:  Laurent Pugin	2008
#           Jason Hockman	2008
# 
# Based partially of otr4gamera and psaltiki4gamera  
# Authors:  Christoph Dalitz  2004-2005
#           Thomas Karsten    2004
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 

# initialization
import sys
import os
import re
import os.path

from gamera.core import *
from gamera.config import config
from gamera import knn
from gamera.classify import BasicGroupingFunction, ShapedGroupingFunction

from gamera.toolkits.aruspix.ax_page import *
from gamera.toolkits.aruspix.ax_file import *
#from gamera.toolkits.ax.plugins import *

# LP basic command line option, I left what seemed useful for us
# LP probably you will have to complete staff removal algorithm choice and params
# LP probably we will also have to add further output options
# LP for now, we can start with images as input and textfile as output, but then we
# LP can switch to Aruspix files (zip archives with everything in it)

#
# parse command line arguments
#
class c_opt:
	indir = ""
	outdir = ""
	setfile = ""
	database = ""
	verbose = 1
	num_lines = 0
	no_pitch = False
	stremoval = "linetracking"	
	staff_h = 0
	num_k = 3
	deskew = 0
	def error_exit(self):
		usage = "Usage:\n\t" + sys.argv[0] + " [<options>] <classifier> <indir>\n" + \
				"Options:\n" + \
				"\t-o <outdir>  output dir (same as indir if omitted)\n" + \
				"\t-n <num>  number of staff lines (autoguessed when omitted)\n" + \
				"\t-k <k>    value of k in kNN ([" + ("%d" % opt.num_k) +"])\n" + \
				"\t-v <lev>  verbose level ([" + ("%d" % opt.verbose) + "])\n" + \
				"\t-no_pitch  no pitch detection \n" + \
				"\t-set <setfile>  setting file for the classifier\n" + \
				"\t-stremoval  indicates the staff removal algorithm \n" + \
				"\t          possible values: 'fujinaga', 'TO BE COMPLETED' ['" + self.stremoval  + "']\n" + \
				"\t-staff_h <num>  staff bounding box height (one staffspace height above and below by default)\n"
		sys.stderr.write(usage)
		sys.exit(1)
opt = c_opt()

i = 1
while i < len(sys.argv):
	if sys.argv[i] == "-o":
		i += 1; opt.outdir = sys.argv[i]
	elif sys.argv[i] == "-n":
		i += 1; opt.num_lines = int(sys.argv[i])
	elif sys.argv[i] == "-staff_h":
		i += 1; opt.staff_h = int(sys.argv[i])
	elif sys.argv[i] == "-k":
		i += 1; opt.num_k = int(sys.argv[i])
	elif sys.argv[i] == "-v":
		i += 1; opt.verbose = int(sys.argv[i])
	elif sys.argv[i] == '-stremoval':
		i += 1; opt.stremoval = sys.argv[i]
	elif sys.argv[i] == '-set':
		i += 1; opt.setfile = sys.argv[i]
	elif sys.argv[i] == '-no_pitch':
		opt.no_pitch = True
	elif sys.argv[i][0] == '-':
		opt.error_exit()
	else:
		opt.database = sys.argv[i]
		i += 1
		opt.indir = sys.argv[i]
	i += 1

if (opt.indir == "") or not os.path.exists(opt.indir):
	sys.stderr.write("File '" + opt.indir + "' not found\n")
	opt.error_exit()

if (opt.outdir == ""):
	opt.outdir = opt.indir
elif not os.path.exists(opt.outdir):
	sys.stderr.write("File '" + opt.outdir + "' not found\n")
	opt.error_exit()


# prevent gamera from parsing arguments
sys.argv = []

init_gamera()

if opt.verbose >= 1:
	config.set("progress_bar",True)

#
# create a classifier and load the database
#
classifier=knn.kNNInteractive([],[\
    'aspect_ratio',\
    'moments',\
    'nrows_feature',\
    'ncols_feature',\
    'volume64regions',\
    ],0)
classifier.num_k = opt.num_k
classifier.from_xml_filename(opt.database)

if (opt.setfile != ""):
	classifier.load_settings( opt.setfile )

rseqn = list(os.listdir(opt.indir))

for filename in rseqn:
	(root, ext) = os.path.splitext(filename)
	if ext in set(['.axz']) and not root.startswith("."):
		print filename
		
		# output filename
		outfilename = os.path.splitext(filename)[0] + ".txt"
		
		f = AxFile(os.path.join(opt.indir,filename), "")

		#
		# load an image, create a AxPage object and remove staves
		# extract plan 0, i.e. music staves 
		# don't know why, but has to be converted to greyscale
		#
		original=f.get_img0().extract(0)
		rot = 0
		skew = original.rotation_angle_projections(-2,2)
		if (abs(skew[0]) > abs(skew[1])):
			rot = skew[0]
		print rot
		#imag = original.to_greyscale()
		#image.save_tiff("page10.tif")
		image = original.rotate(rot, 0)
		#image.save_tiff("page10.tif")
		#image = image.correct_rotation(1)

		# LP Maybe we will have to flip the black and white pixels
		# do quested preprocessing
		if image.data.pixel_type != ONEBIT:
			print "Convert to ONEBIT"
			image = image.to_onebit()
	

		# we create the page	
		page=AxPage(image, opt.num_lines)
		# LP I leave you change this to match the experiments you did on staff removal
		page.remove_staves(crossing_symbols='all', num_lines=opt.num_lines, staff_height=opt.staff_h)

		# get all connected components
		ccs=page.image.cc_analysis()

		# already remove small unclassified glyphs
		ccs=[x for x in ccs if (x.nrows >= 5) and (x.ncols >= 5)]

		#
		# classify the connected components of the image, use half of staffspace
		# height to decide about grouped glyphs
		#
		grp_distance=page.staffspace_height/2
		added,removed=classifier.group_list_automatic([c for c in ccs\
				if c.classification_state == UNCLASSIFIED],\
				ShapedGroupingFunction(grp_distance),max_parts_per_group=3)

		# LP Idem...
		#
		# add both the glyphs that were detected as a group and the manually
		# classified ccs
		#
		if len(added) > 0:
			if opt.verbose >= 2:
				print "Added:", added
			ccs.extend(added)

		# LP I don't know exactly what it is
		# LP I commented this for now ?
		#
		# detected parts of glyphs and special (useless) glyphs will be removed
		#
		ccs=[x for x in ccs if\
				(not x.match_id_name("_group._part.*")) and\
				(not x.match_id_name("*trash*")) and\
				(x.nrows > page.staffline_height)]

		#
		# load the symbols into the page
		#
		print "Number of glyphs:", len(ccs)
		page.add_glyphs(ccs)

		#
		# output the results
		#
		result=page.output( opt.no_pitch )
		result_file=open(os.path.join(opt.outdir,outfilename), "w")
		result_file.write(result)
		result_file.close()

		print "list generated:", outfilename




