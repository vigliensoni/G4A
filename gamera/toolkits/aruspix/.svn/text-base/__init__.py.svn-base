# -*- mode: python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set tabstop=4 shiftwidth=4 expandtab:

"""
Toolkit setup

This file is run on importing anything within this directory.
Its purpose is only to help with the Gamera GUI shell,
and may be omitted if you are not concerned with that.
"""
import sys

from gamera import knn
from gamera.core import *
from gamera.args import *
from gamera.gui import gui
from gamera.toolkits.aruspix.ax_file import AxFile
from gamera.toolkits.aruspix.plugins import *


import re

from gamera import toolkit

from gamera.core import *
import plugins
#from aruspi import PsaltikiPage
from gamera.gui import has_gui

if has_gui.has_gui:
    from gamera.gui import var_name
    from wxPython.wx import *
    import aruspix_module_icon

    class AruspixPageModuleIcon(toolkit.CustomIcon):

        def __init__(self, *args, **kwargs):
            toolkit.CustomIcon.__init__(self, *args, **kwargs)

        def get_icon():
            return toolkit.CustomIcon.to_icon(\
                    aruspix_module_icon.getBitmap())
        get_icon = staticmethod(get_icon)

        def check(data):
            import inspect
            return inspect.ismodule(data) and\
                    data.__name__.endswith("aruspix")
        check = staticmethod(check)

        def right_click(self, parent, event, shell):
            self._shell=shell
            x, y=event.GetPoint()
            menu=wxMenu()

            # create the menu entry for each class listed in
            # 'classes' (they all point to the same method but
            # can be distinguished by their menu index)
            index = 1
            menu.Append(index, "Open Aruspix file")
            EVT_MENU(parent, index, self.openAxFile)
            #index += 1
            #menu.Append(index, "NEXT MENU")
            #EVT_MENU(parent, index, self.NEXT_METHOD)
            parent.PopupMenu(menu, wxPoint(x, y))

        def double_click(self):
            pass

        #
        # creates an instance of a PsaltikiPage class
        #
        def openAxFile(self, event):
            #
            # let the user choose the parameters
            #
            #pp_module="PsaltikiPage"

			axfilename = ""
			tmpdir = ""
			imgvisual = True
			imgmusic = True
			imglyrics = False
			imgborder = False
			imgornate = False
			imgtext = False
			imgtitle = False
			imgflat = False
			imggrey = False
			#opt = c_opt()
			# start options dialog
			dialog=Args([FileOpen("Aruspix file", axfilename, "*.axz"),
				Directory("Temporary directory (optional)", tmpdir),
				Check("Visualize image","",True),
				Check("Extract music staves","",True),
				Check("Extract lyrics"),
				Check("Extract title elements"),
				Check("Extract ornate letters"),
				Check("Extract text in staff"),
				Check("Extract borders"),
				Check("Flatten as BW"),
				Check("Original greyscale image")],
				name="Select options")
			
			params=dialog.show()
						
			if not params:
				return

			i=0
			axfilename=params[i]; i+=1
			if axfilename == "":
				return
			tmpdir=params[i]; i+=1
			if tmpdir == None:
				tmpdir = ""
			imgvisual=params[i]; i+=1
			imgmusic=params[i]; i+=1
			imglyrics=params[i]; i+=1
			imgborders=params[i]; i+=1
			imgornate=params[i]; i+=1
			imgtext=params[i]; i+=1
			imgtitle=params[i]; i+=1
			imgflat=params[i]; i+=1
			imggrey=params[i]; i+=1
			
			axfile = AxFile(axfilename, tmpdir)
			
			global swap
			swap = axfile.get_img0()
			
			if imgvisual == True:
				name=var_name.get("aruspix_img",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.visualize()"\
	            	% (name, self.label ))
			
			if imgmusic == True:
				name=var_name.get("staves",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.extract(0)"\
		            % (name, self.label ))
			
			if imglyrics == True:
				name=var_name.get("lyrics",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.extract(4)"\
		            % (name, self.label ))

			if imgborders == True:
				name=var_name.get("borders",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.extract(1)"\
		            % (name, self.label ))

			if imgornate == True:
				name=var_name.get("ornate_letters",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.extract(2)"\
		            % (name, self.label ))
		
			if imgtext == True:
				name=var_name.get("text_in_staff",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.extract(3)"\
		            % (name, self.label ))
		
			if imgtitle == True:
				name=var_name.get("titles",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.extract(5)"\
		            % (name, self.label ))
		
			if imgflat == True:
				name=var_name.get("all",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.flatten()"\
		            % (name, self.label ))
		
			if imggrey == True:
				swap = axfile.get_img1()
				name=var_name.get("original",\
					self._shell.locals)
				self._shell.run("%s = %s.swap.image_copy()"\
		            % (name, self.label ))
		
    AruspixPageModuleIcon.register()


